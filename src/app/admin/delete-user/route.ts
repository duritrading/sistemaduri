// SUBSTITUIR COMPLETAMENTE: src/app/api/admin/delete-user/route.ts
// Esta vers√£o garante remo√ß√£o completa do usu√°rio do sistema

import { NextRequest, NextResponse } from 'next/server';

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

export async function DELETE(request: NextRequest) {
  try {
    console.log('üîÑ [DELETE] Recebendo requisi√ß√£o para excluir usu√°rio...');

    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');

    if (!userId) {
      return NextResponse.json({
        success: false,
        error: 'ID do usu√°rio √© obrigat√≥rio'
      }, { status: 400 });
    }

    console.log('üìù [DELETE] Excluindo usu√°rio:', userId);

    // Verificar vari√°veis de ambiente
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

    if (!supabaseUrl || !serviceKey) {
      throw new Error('Vari√°veis Supabase n√£o configuradas');
    }

    // Conectar ao Supabase Admin
    const { createClient } = await import('@supabase/supabase-js');
    const supabaseAdmin = createClient(supabaseUrl, serviceKey, {
      auth: { autoRefreshToken: false, persistSession: false }
    });

    console.log('‚úÖ [DELETE] Conex√£o Supabase estabelecida');

    // ‚úÖ VERIFICAR SE USU√ÅRIO EXISTE
    console.log('üîç [DELETE] Verificando usu√°rio:', userId);
    const { data: existingUser, error: userError } = await supabaseAdmin
      .from('user_profiles')
      .select('id, email, full_name, role')
      .eq('id', userId)
      .single();

    if (userError || !existingUser) {
      console.error('‚ùå [DELETE] Usu√°rio n√£o encontrado:', userError);
      return NextResponse.json({
        success: false,
        error: 'Usu√°rio n√£o encontrado'
      }, { status: 404 });
    }

    console.log('‚úÖ [DELETE] Usu√°rio encontrado:', existingUser.email);

    // ‚úÖ PROTE√á√ÉO: VERIFICAR SE N√ÉO √â O √öLTIMO ADMIN
    if (existingUser.role === 'admin') {
      console.log('üîç [DELETE] Verificando se √© o √∫ltimo admin...');
      const { data: adminUsers, error: adminError } = await supabaseAdmin
        .from('user_profiles')
        .select('id')
        .eq('role', 'admin')
        .eq('active', true);

      if (adminError) {
        console.error('‚ùå [DELETE] Erro ao verificar admins:', adminError);
        return NextResponse.json({
          success: false,
          error: 'Erro ao verificar permiss√µes de admin'
        }, { status: 500 });
      }

      if (adminUsers && adminUsers.length <= 1) {
        return NextResponse.json({
          success: false,
          error: 'N√£o √© poss√≠vel excluir o √∫ltimo administrador do sistema'
        }, { status: 400 });
      }
    }

    // ‚úÖ PASSO 1: INVALIDAR TODAS AS SESS√ïES DO USU√ÅRIO
    console.log('üîÑ [DELETE] Invalidando sess√µes ativas...');
    try {
      const { error: logoutError } = await supabaseAdmin.auth.admin.signOut(userId, 'others');
      if (logoutError) {
        console.warn('‚ö†Ô∏è [DELETE] Erro ao invalidar sess√µes:', logoutError.message);
      } else {
        console.log('‚úÖ [DELETE] Sess√µes invalidadas');
      }
    } catch (logoutError) {
      console.warn('‚ö†Ô∏è [DELETE] Erro na invalida√ß√£o de sess√µes:', logoutError);
    }

    // ‚úÖ PASSO 2: EXCLUIR DO AUTH.USERS PRIMEIRO
    console.log('üóëÔ∏è [DELETE] Excluindo usu√°rio do auth...');
    const { error: deleteAuthError } = await supabaseAdmin.auth.admin.deleteUser(userId);

    if (deleteAuthError) {
      console.error('‚ùå [DELETE] Erro ao excluir do auth:', deleteAuthError.message);
      
      // Se falhar na exclus√£o do auth, n√£o continuar
      if (!deleteAuthError.message.includes('User not found')) {
        return NextResponse.json({
          success: false,
          error: `Erro ao excluir usu√°rio do auth: ${deleteAuthError.message}`
        }, { status: 500 });
      } else {
        console.log('‚ÑπÔ∏è [DELETE] Usu√°rio n√£o encontrado no auth (j√° removido)');
      }
    } else {
      console.log('‚úÖ [DELETE] Usu√°rio exclu√≠do do auth');
    }

    // ‚úÖ PASSO 3: EXCLUIR DO USER_PROFILES
    console.log('üóëÔ∏è [DELETE] Excluindo profile do usu√°rio...');
    const { error: deleteProfileError } = await supabaseAdmin
      .from('user_profiles')
      .delete()
      .eq('id', userId);

    if (deleteProfileError) {
      console.error('‚ùå [DELETE] Erro ao excluir profile:', deleteProfileError);
      return NextResponse.json({
        success: false,
        error: `Erro ao excluir profile: ${deleteProfileError.message}`
      }, { status: 500 });
    }

    console.log('‚úÖ [DELETE] Profile exclu√≠do');

    // ‚úÖ SUCESSO COMPLETO
    console.log('üéâ [DELETE] Usu√°rio completamente removido:', existingUser.email);

    return NextResponse.json({
      success: true,
      message: `Usu√°rio ${existingUser.email} foi completamente removido do sistema`,
      deletedUser: {
        id: existingUser.id,
        email: existingUser.email,
        full_name: existingUser.full_name
      },
      actions: [
        'Sess√µes ativas invalidadas',
        'Removido do sistema de autentica√ß√£o',
        'Profile de usu√°rio exclu√≠do'
      ]
    });

  } catch (error) {
    console.error('‚ùå [DELETE] Erro geral na exclus√£o:', error);
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Erro interno do servidor'
    }, { status: 500 });
  }
}

// ‚úÖ SUPORTE A POST PARA COMPATIBILIDADE
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const userId = body.userId;

    if (!userId) {
      return NextResponse.json({
        success: false,
        error: 'ID do usu√°rio √© obrigat√≥rio'
      }, { status: 400 });
    }

    // Criar URL com userId como query param
    const deleteUrl = new URL(request.url);
    deleteUrl.searchParams.set('userId', userId);
    
    // Criar nova request DELETE
    const deleteRequest = new NextRequest(deleteUrl, {
      method: 'DELETE',
      headers: request.headers
    });

    return DELETE(deleteRequest);

  } catch (error) {
    console.error('‚ùå [DELETE] Erro no POST:', error);
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Erro interno do servidor'
    }, { status: 500 });
  }
}