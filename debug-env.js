// debug-env.js - DEBUGGAR VARI√ÅVEIS DE AMBIENTE
// Execute na raiz do projeto: node debug-env.js

const path = require('path');
const fs = require('fs');

console.log('üîç DEBUGGANDO VARI√ÅVEIS DE AMBIENTE\n');

// 1. Verificar localiza√ß√£o do arquivo
const envLocalPath = path.join(process.cwd(), '.env.local');
const envExists = fs.existsSync(envLocalPath);

console.log('üìÅ LOCALIZA√á√ÉO DOS ARQUIVOS:');
console.log('Current Directory:', process.cwd());
console.log('.env.local path:', envLocalPath);
console.log('.env.local exists:', envExists ? '‚úÖ' : '‚ùå');

if (!envExists) {
  console.log('\n‚ùå ARQUIVO .env.local N√ÉO ENCONTRADO!');
  console.log('üìù Crie o arquivo .env.local na raiz do projeto (mesmo n√≠vel do package.json)');
  process.exit(1);
}

// 2. Ler conte√∫do do arquivo
console.log('\nüìÑ CONTE√öDO DO .env.local:');
const envContent = fs.readFileSync(envLocalPath, 'utf8');
const lines = envContent.split('\n').filter(line => line.trim() && !line.startsWith('#'));

lines.forEach((line, index) => {
  if (line.includes('SUPABASE_SERVICE_ROLE_KEY')) {
    const [key, value] = line.split('=');
    if (value && value.length > 20) {
      console.log(`${index + 1}. ‚úÖ ${key}=${value.substring(0, 20)}...${value.substring(value.length - 10)}`);
    } else {
      console.log(`${index + 1}. ‚ùå ${line} (VALOR MUITO CURTO OU INV√ÅLIDO)`);
    }
  } else {
    const [key] = line.split('=');
    console.log(`${index + 1}. ‚ÑπÔ∏è  ${key}=***`);
  }
});

// 3. Testar carregamento manual
console.log('\nüß™ TESTE DE CARREGAMENTO MANUAL:');
require('dotenv').config({ path: envLocalPath });

const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;

console.log('SUPABASE_URL loaded:', !!supabaseUrl ? '‚úÖ' : '‚ùå');
console.log('SERVICE_ROLE_KEY loaded:', !!serviceKey ? '‚úÖ' : '‚ùå');

if (serviceKey) {
  console.log('SERVICE_ROLE_KEY preview:', serviceKey.substring(0, 20) + '...' + serviceKey.substring(serviceKey.length - 10));
  console.log('SERVICE_ROLE_KEY length:', serviceKey.length);
  
  // Verificar se √© realmente uma JWT
  if (serviceKey.startsWith('eyJ') && serviceKey.includes('.')) {
    console.log('‚úÖ SERVICE_ROLE_KEY parece ser uma JWT v√°lida');
  } else {
    console.log('‚ùå SERVICE_ROLE_KEY n√£o parece ser uma JWT v√°lida');
  }
} else {
  console.log('‚ùå SERVICE_ROLE_KEY n√£o foi carregada!');
}

// 4. Instru√ß√µes
console.log('\nüìã PR√ìXIMOS PASSOS:');
if (serviceKey && supabaseUrl) {
  console.log('‚úÖ Vari√°veis encontradas! Execute:');
  console.log('   1. rm -rf .next (limpar cache do Next.js)');
  console.log('   2. npm run dev (reiniciar servidor)');
  console.log('   3. Teste criar usu√°rio novamente');
} else {
  console.log('‚ùå Vari√°veis n√£o carregadas! Verifique:');
  console.log('   1. Arquivo .env.local na raiz do projeto');
  console.log('   2. Sintaxe: SUPABASE_SERVICE_ROLE_KEY=sua_key_aqui');
  console.log('   3. Sem espa√ßos ao redor do =');
  console.log('   4. Key deve come√ßar com eyJ');
}

console.log('\nüîó Para obter a SERVICE_ROLE_KEY:');
console.log('   https://supabase.com/dashboard ‚Üí Seu Projeto ‚Üí Settings ‚Üí API ‚Üí service_role');